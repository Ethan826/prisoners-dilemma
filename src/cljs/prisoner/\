(ns prisoner.core
  (:require [reagent.core :as reagent :refer [atom]]
            [reagent.session :as session]
            [prisoner.game :as g]
            [prisoner.player :as p]
            [reagent-forms.core :refer [bind-fields]]
            [secretary.core :as secretary :include-macros true]
            [accountant.core :as accountant]))

;; -------------------------
;; State

(def doc (atom {:rounds 500}))

;; -------------------------
;; Validation

(defn validate-rounds [val] (= (type val) js/Number))

(defn enforce-number [id value local-copy-of-doc master-copy-of-doc]
  (if (keyword-identical? (first id) :rounds)
    (if (validate-rounds value)
      (assoc master-copy-of-doc :rounds value)
      (do (.log js/console "Problem is here")
          (assoc master-copy-of-doc :rounds (:rounds @local-copy-of-doc))))
    nil))
;; -------------------------
;; Components and functions

(def my-form
  [:div.row
   [:div.col-sm-8.col-md-offset-2
    [:div.form-group
     [:label "Player 1 strategy"]
     [:select.form-control {:field :list :id :p1}
      (for [strategy (keys p/players)]
        [:option {:key strategy} (-> p/players strategy :name)])]]
    [:div.form-group
     [:label "Player 2 strategy"]
     [:select.form-control {:field :list :id :p2}
      (for [strategy (keys p/players)]
        [:option {:key strategy} (-> p/players strategy :name)])]]
    [:div.form-group
     [:label "Number of rounds"]
     [:input.form-control
      {:field :numeric
       :type :number
       :id :rounds}]]]])

(defn run-simulation [d]
  (.log js/console
        (str (g/get-score
              (g/run-series
               (-> @d :p1 p/players :fn)
               (-> @d :p1 p/players :fn)
               (:rounds @d))))))

;; -------------------------
;; Views

(defn home-page []
  [:div.container-fluid
   [:div.row
    [:div.col-sm-8.col-md-offset-2
     [:h1 "Iterated Prisonerâ€™s Dilemma Simulator"]]]
   [bind-fields
    my-form
    doc
    (fn [id value local-copy-of-doc]
      (enforce-number id value local-copy-of-doc doc))] ; Keep helper function pure
   [:div.row
    [:div.col-sm-8.col-md-offset-2
     [:button.btn.btn-primary
      {:on-click (fn [] (run-simulation doc))} ; Keep helper function pure
      "Submit"]]]
   [:div.col-sm-8.col-md-offset-2
    [:p (str @doc)]]])

(defn current-page []
  [:div [(session/get :current-page)]])

;; -------------------------
;; Routes

(secretary/defroute "/" []
  (session/put! :current-page #'home-page))

;; -------------------------
;; Initialize app

(defn mount-root []
  (reagent/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (secretary/dispatch! path))
    :path-exists?
    (fn [path]
      (secretary/locate-route path))})
  (accountant/dispatch-current!)
  (mount-root))

(enable-console-print!)
